version: "2.4"

services:
  # Python poller to be able to send emails via the host network.
  email:
    image: python:3
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
    working_dir: /email
    command: python3 poller.py /alaska/data/email -i 30
    volumes:
      - ./src/email:/email
      - data:/alaska/data
    network_mode: host
  # MongoDB
  mongo:
    image: mongo:xenial
    restart: always
    command: --smallfiles --logpath=/dev/null # suppress output
    volumes:
      - ./db:/data/db
    expose:
      - 27017
    networks:
      - backend
    healthcheck:
      test: echo 'db.stats().ok' | mongo mongo:27017/alaska --quiet
      interval: 5s
      timeout: 5s
      retries: 3
  # Flask Webhook Server
  webhook:
    image: lioscro/alaska:webhook
    restart: always
    environment:
      - PARSE_HOSTNAME=${PARSE_HOSTNAME}
      - PARSE_APP_ID=${PARSE_APP_ID}
      - PARSE_MASTER_KEY=${PARSE_MASTER_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - SENTRY_WEBHOOK_DSN=${SENTRY_WEBHOOK_DSN}
      - SENTRY_INDEX_DSN=${SENTRY_INDEX_DSN}
      - VERSION=${VERSION}
    ports:
      - "5000:5000"
    volumes:
      - ./src/webhook:/flask
      - data:/alaska/data
      - scripts:/alaska/scripts
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - parse-server
    networks:
      - backend
  # Worker server
  worker:
    image: lioscro/alaska:worker
    restart: always
    environment:
      - PARSE_HOSTNAME=http://parse-server:1337/parse
      - PARSE_APP_ID=${PARSE_APP_ID}
      - PARSE_MASTER_KEY=${PARSE_MASTER_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - SENTRY_WORKER_DSN=${SENTRY_WORKER_DSN}
      - SENTRY_QC_DSN=${SENTRY_QC_DSN}
      - SENTRY_QUANT_DSN=${SENTRY_QUANT_DSN}
      - SENTRY_DIFF_DSN=${SENTRY_DIFF_DSN}
      - SENTRY_POST_DSN=${SENTRY_POST_DSN}
    volumes:
      - ./src/worker:/worker
      - data:/alaska/data
      - scripts:/alaska/scripts
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - parse-server
    networks:
      - backend
  # NGINX server
  nginx:
    image: nginx:stable
    restart: always
    environment:
      - PARSE_HOSTNAME=${PARSE_HOSTNAME}
      - PARSE_APP_ID=${PARSE_APP_ID}
      - PARSE_MASTER_KEY=${PARSE_MASTER_KEY}
    ports:
      - "${PORT}:80"
    volumes:
      - ./src/web:/usr/share/nginx/html:ro
      - data:/alaska/data
      - ./src/nginx:/etc/nginx/conf.d:ro
    depends_on:
      - parse-server
    networks:
      - backend
  # FTP server
  ftp:
    image: stilliard/pure-ftpd:hardened
    restart: always
    environment:
      - PUBLICHOST=${PUBLICHOST}
      - FTP_MAX_CLIENTS=50
      - FTP_MAX_CONNECTIONS=10
      - FTP_PASSIVE_PORTS=30000:30099
      - ADDED_FLAGS=-d -d -O w3c:/var/log/pure-ftpd/transfer.log -Y 0
    ports:
      - "30000-30099:30000-30099"
      - "21:21"
    volumes:
      - ./data/ftp/passwd:/etc/pure-ftpd/passwd
      - data:/home/ftpuser
    depends_on:
      - parse-server
    networks:
      - backend
  # Parse Server
  parse-server:
    image: parseplatform/parse-server:3.2.3
    restart: always
    volumes:
      - ./src/cloud:/parse-server/cloud
    environment:
      - PARSE_SERVER_MASTER_KEY=${PARSE_MASTER_KEY}
      - PARSE_SERVER_APPLICATION_ID=${PARSE_APP_ID}
      - VERBOSE=0
      - PARSE_SERVER_DATABASE_URI=mongodb://mongo:27017/alaska
      - PARSE_SERVER_URL=${PARSE_HOSTNAME}
      - PARSE_SERVER_CLOUD=/parse-server/cloud/main.js
      - PARSE_SERVER_SESSION_LENGTH=21600
    ports:
      - "1337:1337"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - backend
  # Parse Dashboard
  parse-dashboard:
    image: parseplatform/parse-dashboard:1.3.3
    restart: always
    command: --dev
    ports:
      - "4040:4040"
    environment:
      - PARSE_DASHBOARD_ALLOW_INSECURE_HTTP=1
      - PARSE_DASHBOARD_SERVER_URL=http://${PUBLICHOST}:1337/parse
      - PARSE_DASHBOARD_APP_ID=${PARSE_APP_ID}
      - PARSE_DASHBOARD_MASTER_KEY=${PARSE_MASTER_KEY}
      - PARSE_DASHBOARD_USER_ID=${DASHBOARD_ID}
      - PARSE_DASHBOARD_USER_PASSWORD=${DASHBOARD_PW}
      - PARSE_DASHBOARD_TIMEZONE=${TIMEZONE}
    depends_on:
      - parse-server
    networks:
      - backend

volumes:
  data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  scripts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/src/scripts

networks:
  backend:
